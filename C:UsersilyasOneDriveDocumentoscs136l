class TicTacToe:
    def __init__(self):
        self.board = [[" " for x in range(3)] for x in range(3)]
        self.current_player = "X"

    def print_board(self):
        for row in self.board:
            print(" | ".join(row))
            print("-" * 10)

    def swap_player(self):
        self.current_player = "O" if self.current_player == "X" else "X"

    def is_valid_move(self, row, col):
        return 0 <= row < 3 and 0 <= col < 3 and self.board[row][col] == " "

    def make_move(self, row, col):
        self.board[row][col] = self.current_player

    def check_winner(self):
        b = self.board
        p = self.current_player

        return (
            # rows
            any(all(b[i][j] == p for j in range(3)) for i in range(3)) or  
            # columns
            any(all(b[i][j] == p for i in range(3)) for j in range(3)) or  
            # forwards diagonal
            all(b[i][i] == p for i in range(3)) or              
            # backwards diagonal
            all(b[i][2 - i] == p for i in range(3))                        
        )

    def is_draw(self):
        return all(cell != " " for row in self.board for cell in row)

    def play(self):
        while True:
            self.print_board()
            print(f"Player {self.current_player}'s turn.")

            try:
                row = int(input("Enter row (0-2): "))
                col = int(input("Enter col (0-2): "))

                if not self.is_valid_move(row, col):
                    print("Invalid move. Try again.")
                    continue
            except ValueError:
                print("Please enter numbers only.")
                continue

            self.make_move(row, col)

            if self.check_winner():
                self.print_board()
                print(f"Player {self.current_player} wins!")
                break
            if self.is_draw():
                self.print_board()
                print("It's a draw!")
                break

            self.swap_player()

if __name__ == "__main__":
    game = TicTacToe()
    game.play()
